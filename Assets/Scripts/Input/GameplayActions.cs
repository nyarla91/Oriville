//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/GameplayActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameplayActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameplayActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameplayActions"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""5fc8b0c1-056f-4cb3-a014-b121bf02fd49"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""d5881f0b-7642-4528-adf8-53db6c955739"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DragButton"",
                    ""type"": ""Button"",
                    ""id"": ""dd8c5363-acd9-4653-9d34-6768b507529d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""24e31f49-ee06-47a4-a841-334557c25dd2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThumbstickMove"",
                    ""type"": ""Value"",
                    ""id"": ""dffeba88-e346-4e71-a3a8-e5173ed33fe7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""51d64025-3683-4a28-ba73-800d939a07a8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""badcd0e7-08d2-4cad-9408-6c53af9e1940"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efc483d5-4cf7-48bc-90a8-c6ca90416e43"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8270f28e-7d7d-43b6-8609-00c0020caaed"",
                    ""path"": ""<DualShockGamepad>/touchpadButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a9bc944-351e-42eb-879c-e27bf87080b1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d1d848e-a456-40eb-94c8-73d91cbb2ac5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97715dd0-13aa-4a30-b9f4-3fa9fe62128a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a31c9a6-bbfc-4f54-9677-2a2c97071ce6"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f083937-399d-4fc6-ac90-1ae350b22134"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=3)"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d2b6356-1df7-4d3c-84bf-01ba5fb109ee"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThumbstickMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Placement"",
            ""id"": ""af387ac6-cd55-4bd2-8d83-4e960c630a0d"",
            ""actions"": [
                {
                    ""name"": ""Place"",
                    ""type"": ""Button"",
                    ""id"": ""74a0d7c7-c37d-4da5-870c-5eb1b4f3e72e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c864017-4549-4fcb-9939-f0a54bf61bda"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b08c1c3-f0fd-47e1-b74a-7685d7659a42"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""12050112-1c86-465c-ae7b-20fe29807b06"",
            ""actions"": [
                {
                    ""name"": ""ToggleMemo"",
                    ""type"": ""Button"",
                    ""id"": ""c6808230-b1c0-4c3c-ab1e-cdd08c7a52c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""06455726-c6d9-4512-bbd7-94f42081f06b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleMemo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b5d71d0-dfd7-46e5-b3b0-c9b70dbee71b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleMemo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Pause = m_Camera.FindAction("Pause", throwIfNotFound: true);
        m_Camera_DragButton = m_Camera.FindAction("DragButton", throwIfNotFound: true);
        m_Camera_MouseMove = m_Camera.FindAction("MouseMove", throwIfNotFound: true);
        m_Camera_ThumbstickMove = m_Camera.FindAction("ThumbstickMove", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        // Placement
        m_Placement = asset.FindActionMap("Placement", throwIfNotFound: true);
        m_Placement_Place = m_Placement.FindAction("Place", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_ToggleMemo = m_UI.FindAction("ToggleMemo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_Pause;
    private readonly InputAction m_Camera_DragButton;
    private readonly InputAction m_Camera_MouseMove;
    private readonly InputAction m_Camera_ThumbstickMove;
    private readonly InputAction m_Camera_Zoom;
    public struct CameraActions
    {
        private @GameplayActions m_Wrapper;
        public CameraActions(@GameplayActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Camera_Pause;
        public InputAction @DragButton => m_Wrapper.m_Camera_DragButton;
        public InputAction @MouseMove => m_Wrapper.m_Camera_MouseMove;
        public InputAction @ThumbstickMove => m_Wrapper.m_Camera_ThumbstickMove;
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnPause;
                @DragButton.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnDragButton;
                @DragButton.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnDragButton;
                @DragButton.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnDragButton;
                @MouseMove.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseMove;
                @MouseMove.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseMove;
                @MouseMove.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseMove;
                @ThumbstickMove.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnThumbstickMove;
                @ThumbstickMove.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnThumbstickMove;
                @ThumbstickMove.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnThumbstickMove;
                @Zoom.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @DragButton.started += instance.OnDragButton;
                @DragButton.performed += instance.OnDragButton;
                @DragButton.canceled += instance.OnDragButton;
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
                @ThumbstickMove.started += instance.OnThumbstickMove;
                @ThumbstickMove.performed += instance.OnThumbstickMove;
                @ThumbstickMove.canceled += instance.OnThumbstickMove;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Placement
    private readonly InputActionMap m_Placement;
    private IPlacementActions m_PlacementActionsCallbackInterface;
    private readonly InputAction m_Placement_Place;
    public struct PlacementActions
    {
        private @GameplayActions m_Wrapper;
        public PlacementActions(@GameplayActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Place => m_Wrapper.m_Placement_Place;
        public InputActionMap Get() { return m_Wrapper.m_Placement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlacementActions set) { return set.Get(); }
        public void SetCallbacks(IPlacementActions instance)
        {
            if (m_Wrapper.m_PlacementActionsCallbackInterface != null)
            {
                @Place.started -= m_Wrapper.m_PlacementActionsCallbackInterface.OnPlace;
                @Place.performed -= m_Wrapper.m_PlacementActionsCallbackInterface.OnPlace;
                @Place.canceled -= m_Wrapper.m_PlacementActionsCallbackInterface.OnPlace;
            }
            m_Wrapper.m_PlacementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Place.started += instance.OnPlace;
                @Place.performed += instance.OnPlace;
                @Place.canceled += instance.OnPlace;
            }
        }
    }
    public PlacementActions @Placement => new PlacementActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_ToggleMemo;
    public struct UIActions
    {
        private @GameplayActions m_Wrapper;
        public UIActions(@GameplayActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleMemo => m_Wrapper.m_UI_ToggleMemo;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @ToggleMemo.started -= m_Wrapper.m_UIActionsCallbackInterface.OnToggleMemo;
                @ToggleMemo.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnToggleMemo;
                @ToggleMemo.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnToggleMemo;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleMemo.started += instance.OnToggleMemo;
                @ToggleMemo.performed += instance.OnToggleMemo;
                @ToggleMemo.canceled += instance.OnToggleMemo;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ICameraActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnDragButton(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
        void OnThumbstickMove(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IPlacementActions
    {
        void OnPlace(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnToggleMemo(InputAction.CallbackContext context);
    }
}
